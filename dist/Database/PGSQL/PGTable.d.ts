import { PGColumn } from './PGColumn';
import { PGIndex } from './PGIndex';
import { PGForeignKey } from './PGForeignKey';
import { Client, Pool, PoolClient } from 'pg';
export declare type TConnection = Pool | PoolClient | Client;
export declare class PGTable {
    name: string;
    description: string;
    check: string | string[] | null;
    inherits: string[];
    columns: PGColumn[];
    indexes: PGIndex[];
    foreignKeys: PGForeignKey[];
    constructor(instanceData?: PGTable);
    protected deserialize(instanceData: PGTable): void;
    indexOfColumn(columnName: string): number;
    indexesOfForeignKeyByColumn(columnName: string): number[];
    getForeignKeysByColumn(columnName: string): PGForeignKey[];
    removeForeignKeysByColumn(columnName: string): void;
    removeIndexsByColumn(columnName: string): void;
    addForeignKey(pgForeignKey: PGForeignKey): void;
    getColumn(columnName: string): PGColumn | null;
    removeColumn(columnName: string): void;
    addColumn(pgColumn: PGColumn): void;
    reOrderColumns(): void;
    addIndex(pgIndex: PGIndex): void;
    tableHeaderText(forTableText: string): string;
    tsText(): string;
    tsTextTable(): string;
    ddlPrimaryKey(): string | null;
    ddlCreateTableText(createForeignKeys: boolean, createIndexes: boolean): string;
    ddlCreateIndexes(): string;
    ddlCreateForeignKeysText(): string;
    static CleanComment(comment: string): string;
}
