import { MyColumn } from "./MyColumn";
import { MyIndex } from "./MyIndex";
import { MyForeignKey } from "./MyForeignKey";
export declare class MyTable {
    name: string;
    description: string;
    ENGINE: string;
    CHARSET: string;
    COLLATE: string;
    ROW_FORMAT: string;
    static readonly DEFINITIONS_DIR: string;
    static readonly TS_INTERFACE_DIR: string;
    static readonly TS_CLASS_DIR: string;
    columns: MyColumn[];
    indexes: MyIndex[];
    foreignKeys: MyForeignKey[];
    constructor(instanceData?: MyTable);
    private deserialize;
    indexOfColumn(columnName: string): number;
    indexesOfForeignKeyByColumn(columnName: string): number[];
    getForeignKeysByColumn(columnName: string): MyForeignKey[];
    removeForeignKeysByColumn(columnName: string): void;
    addForeignKey(myForeignKey: MyForeignKey): void;
    getColumn(columnName: string): MyColumn | null;
    removeColumn(columnName: string): void;
    addColumn(myColumn: MyColumn): void;
    reOrderColumns(): void;
    addIndex(myIndex: MyIndex): void;
    tableHeaderText(forTableText: string): string;
    tsText(): string;
    tsTextTable(): string;
    ddlPrimaryKey(_altering: boolean): string | null;
    ddlText(process: boolean, includeFKs: boolean, altering?: boolean): Promise<string | null>;
    save(): void;
    static ExistsNewTS(): boolean;
    moveInNewTS(): void;
    static writeFileIfDifferent(fileName: string, data: string, useSBVCheck: boolean, skipIfExists?: boolean): true | void;
    static writeFileIfNotExists(fileName: string, data: string): void;
    syncToDB(includeFKs: boolean, altering?: boolean): Promise<boolean>;
    static SaveAll(myTables: MyTable[]): void;
    static Load(fileName: string): MyTable | null;
    static LoadAll(): MyTable[];
    static DeleteAll(): void;
    static SetPermissions(): void;
    static CleanComment(comment: string): string;
}
