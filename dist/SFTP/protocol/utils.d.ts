export function bufferCopy(src: any, dest: any, srcStart: any, srcEnd: any, destStart: any): number;
export function bufferSlice(buf: any, start: any, end: any): any;
export const FastBuffer: any;
export function makeError(msg: any, level: any, fatal: any): Error;
export function readUInt32BE(buf: any, offset: any): any;
export function writeUInt32BE(buf: any, value: any, offset: any): any;
export function makeBufferParser(): {
    init: (buf: any, start: any) => void;
    pos: () => number;
    length: () => any;
    avail: () => number;
    clear: () => void;
    readUInt32BE: () => any;
    readUInt64BE: (behavior: any) => any;
    skip: (n: any) => void;
    skipString: () => any;
    readByte: () => any;
    readBool: () => boolean | undefined;
    readList: () => any;
    readString: (dest: any, maxLen: any) => any;
    readRaw: (len: any) => any;
};
export declare function bufferFill(buf: any, value: any, start: any, end: any): any;
export declare function doFatalError(protocol: any, msg: any, level: any, reason: any): number;
export declare function writeUInt32LE(buf: any, value: any, offset: any): any;
export declare namespace bufferParser {
    export function init(buf: any, start: any): void;
    export function pos(): number;
    export function length(): any;
    export function avail(): number;
    export function clear(): void;
    export function readUInt32BE_1(): any;
    export { readUInt32BE_1 as readUInt32BE };
    export function readUInt64BE(behavior: any): any;
    export function skip(n: any): void;
    export function skipString(): any;
    export function readByte(): any;
    export function readBool(): boolean | undefined;
    export function readList(): any;
    export function readString(dest: any, maxLen: any): any;
    export function readRaw(len: any): any;
}
export declare function readString_1(buffer: any, start: any, dest: any, maxLen: any): any;
export declare function sigSSHToASN1(sig: any, type: any): any;
export declare function convertSignature(signature: any, keyType: any): any;
export declare function sendPacket(proto: any, packet: any, bypass: any): boolean;
export { readString_1 as readString };
